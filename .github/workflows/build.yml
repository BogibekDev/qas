name: Build Flutter App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Flutter App
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [android, ios, web, windows, macos, linux]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Set up Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '12.x'

      - name: Build Android
        if: matrix.platform == 'android'
        run: flutter build apk --release

      - name: Set up Xcode
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.x'

      - name: Build iOS
        if: matrix.platform == 'ios'
        run: flutter build ios --release --no-codesign

      - name: Build Web
        if: matrix.platform == 'web'
        run: flutter build web --release

      - name: Set up Windows
        if: matrix.platform == 'windows'
        run: flutter config --enable-windows-desktop

      - name: Build Windows
        if: matrix.platform == 'windows'
        run: flutter build windows --release

      - name: Set up macOS
        if: matrix.platform == 'macos'
        run: flutter config --enable-macos-desktop

      - name: Build macOS
        if: matrix.platform == 'macos'
        run: flutter build macos --release

      - name: Set up Linux
        if: matrix.platform == 'linux'
        run: flutter config --enable-linux-desktop

      - name: Build Linux
        if: matrix.platform == 'linux'
        run: flutter build linux --release

      - name: Define version
        run: echo "VERSION=v1.${{ github.run_number }}-${{ github.sha }}" >> $GITHUB_ENV

      - name: Upload to Telegram (Android)
        if: matrix.platform == 'android'
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/app-release-${VERSION}.apk
          curl -F document=@build/app/outputs/flutter-apk/app-release-${VERSION}.apk \
               -F chat_id=$CHAT_ID \
               -F caption="Android APK version ${VERSION}" \
               https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument

      - name: Upload to Telegram (iOS)
        if: matrix.platform == 'ios'
        run: |
          mv build/ios/iphoneos/Runner.app build/ios/iphoneos/Runner-${VERSION}.app
          curl -F document=@build/ios/iphoneos/Runner-${VERSION}.app \
               -F chat_id=$CHAT_ID \
               -F caption="iOS App version ${VERSION}" \
               https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument

      - name: Upload to Telegram (Web)
        if: matrix.platform == 'web'
        run: |
          zip -r web-build-${VERSION}.zip build/web
          curl -F document=@web-build-${VERSION}.zip \
               -F chat_id=$CHAT_ID \
               -F caption="Web Build version ${VERSION}" \
               https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument

      - name: Upload to Telegram (Windows)
        if: matrix.platform == 'windows'
        run: |
          zip -r windows-build-${VERSION}.zip build/windows/runner/Release
          curl -F document=@windows-build-${VERSION}.zip \
               -F chat_id=$CHAT_ID \
               -F caption="Windows Build version ${VERSION}" \
               https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument

      - name: Upload to Telegram (macOS)
        if: matrix.platform == 'macos'
        run: |
          zip -r macos-build-${VERSION}.zip build/macos/Build/Products/Release
          curl -F document=@macos-build-${VERSION}.zip \
               -F chat_id=$CHAT_ID \
               -F caption="macOS Build version ${VERSION}" \
               https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument

      - name: Upload to Telegram (Linux)
        if: matrix.platform == 'linux'
        run: |
          zip -r linux-build-${VERSION}.zip build/linux/runner/release
          curl -F document=@linux-build-${VERSION}.zip \
               -F chat_id=$CHAT_ID \
               -F caption="Linux Build version ${VERSION}" \
               https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  CHAT_ID: ${{ secrets.CHAT_ID }}